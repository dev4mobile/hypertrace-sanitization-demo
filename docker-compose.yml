services:
  # Jaeger - 分布式追踪系统
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - hypertrace-network

  # Prometheus - 监控指标收集
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - hypertrace-network

  # # Grafana - 可视化仪表板
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #   networks:
  #     - hypertrace-network

  # clickstack:
  #   image: docker.hyperdx.io/hyperdx/hyperdx-all-in-one
  #   container_name: clickstack
  #   environment:
  #     FRONTEND_URL: http://localhost:16686
  #     HYPERDX_API_KEY: Sw@123456
  #     OTEL_SERVICE_NAME: 'hdx-oss-api'
  #     # OTEL_AGENT_FEATURE_GATE_ARG: --feature-gates=clickhouse.json
  #   ports:
  #     - "4317:4317"
  #     - "4318:4318"
  #     - "16686:8080"
  #   volumes:
  #     - clickstack-db-data:/data/db
  #     - clickstack-ch-data:/var/lib/clickhouse
  #   networks:
  #     - hypertrace-network

  # Kafka - 消息代理 (KRaft 模式，无需 Zookeeper)
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka
    container_name: kafka
    environment:
      # KRaft 模式配置
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

      # 监听器配置
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT

      # 日志和存储配置
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_METADATA_LOG_SEGMENT_MS: 15000
      KAFKA_METADATA_MAX_RETENTION_MS: 1200000
      KAFKA_METADATA_LOG_MAX_RECORD_BYTES_BETWEEN_SNAPSHOTS: 2800

      # 主题默认配置
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # JMX 配置
      KAFKA_JMX_PORT: 19092
      KAFKA_JMX_HOSTNAME: localhost

      # Hypertrace Agent 配置
      KAFKA_OPTS: >-
        -javaagent:/opt/hypertrace/hypertrace-agent.jar -Dhypertrace.service.name=kafka-broker
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./agents/hypertrace-agent-1.3.25.jar:/opt/hypertrace/hypertrace-agent.jar
    networks:
      - hypertrace-network

  # # Kafka UI - Web 管理界面
  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: kafka-ui
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "8088:8080"
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #   networks:
  #     - hypertrace-network

  # Postgres - 关系型数据库
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: hypertrace
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - hypertrace-network
  # 脱敏配置服务 - PostgreSQL 数据库
  sanitization-postgres:
    image: postgres:16-alpine
    container_name: sanitization-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=sanitization_config
      - POSTGRES_USER=sanitization_user
      - POSTGRES_PASSWORD=sanitization_pass_2024!
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - sanitization-postgres-data:/var/lib/postgresql/data
      - ./sanitization-config-service/database/init-docker.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - hypertrace-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U sanitization_user -d sanitization_config"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 脱敏配置服务 - 后端API
  sanitization-backend:
    build:
      context: ./sanitization-config-service/server
      dockerfile: Dockerfile
    container_name: sanitization-backend
    ports:
      - "3001:3001"
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      # 数据库配置
      - DB_HOST=sanitization-postgres
      - DB_PORT=5432
      - DB_NAME=sanitization_config
      - DB_USER=sanitization_user
      - DB_PASSWORD=sanitization_pass_2024!
      - DB_SSL=false
      # 连接池配置
      - DB_POOL_MAX=10
      - DB_POOL_MIN=2
      - DB_IDLE_TIMEOUT=30000
      - DB_CONNECTION_TIMEOUT=5000
    depends_on:
      sanitization-postgres:
        condition: service_healthy
    networks:
      - hypertrace-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.3"
        reservations:
          memory: 128M
          cpus: "0.1"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 脱敏配置服务 - 前端管理界面
  sanitization-frontend:
    build:
      context: ./sanitization-config-service
      dockerfile: Dockerfile
    container_name: sanitization-frontend
    ports:
      - "3000:8080"
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_VERSION=1.0.0
      - REACT_APP_API_URL=http://localhost:3001
    depends_on:
      sanitization-backend:
        condition: service_healthy
    networks:
      - hypertrace-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Spring Boot 应用 - Hypertrace Sanitization Demo
  hypertrace-sanitization-demo-app:
    build: .
    container_name: hypertrace-sanitization-demo-app
    ports:
      - "10020:8080"
    depends_on:
      - postgres
      - kafka
      - jaeger
      - sanitization-backend
    hostname: hypertrace-sanitization-demo-app
    environment:
      # Spring Boot 配置
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/hypertrace
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092
      - HT_SANITIZATION_CONFIG_ENDPOINT=http://sanitization-backend:3001/api/sanitization/rules
      - HT_SANITIZATION_CONFIG_REFRESH_INTERVAL=20

      # Hypertrace Agent 配置
      - JAVA_OPTS=-javaagent:/opt/hypertrace/hypertrace-agent-1.3.25.jar -Dotel.instrumentation.kafka.enabled=true -Dotel.instrumentation.kafka.capture-message-key=true

      # OpenTelemetry 配置
      - OTEL_SERVICE_NAME=hypertrace-sanitization-demo-app
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317
      - OTEL_EXPORTER_OTLP_HEADERS=authorization=5edae162-cec0-4950-8151-75b170d7c0a8
      - OTEL_METRICS_EXPORTER=none
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=none

      # 通过环境变量禁用所有数据库相关 instrumentation
      - OTEL_INSTRUMENTATION_JDBC_ENABLED=false
      - OTEL_INSTRUMENTATION_JPA_ENABLED=false
      - OTEL_INSTRUMENTATION_HIBERNATE_ENABLED=false
      - OTEL_INSTRUMENTATION_HIKARICP_ENABLED=false
      - OTEL_INSTRUMENTATION_JDBC_DATASOURCE_ENABLED=false

      # https://github.com/hypertrace/agent-config/blob/main/ENV_VARS.md
      - HT_TELEMETRY_METRICS_ENABLED=false

    volumes:
      - ./agents/hypertrace-agent-1.3.25.jar:/opt/hypertrace/hypertrace-agent-1.3.25.jar
    networks:
      - hypertrace-network
    restart: unless-stopped

volumes:
  kafka-data:
  postgres-data:
  clickstack-ch-data:
  clickstack-db-data:
  sanitization-postgres-data:

networks:
  hypertrace-network:
    driver: bridge

services:
  # PostgreSQL 数据库服务
  sanitization-postgres:
    image: postgres:15-alpine
    container_name: sanitization-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=sanitization_config
      - POSTGRES_USER=sanitization_user
      - POSTGRES_PASSWORD=sanitization_pass_2024!
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "55432:5432"
    volumes:
      - sanitization-postgres-data:/var/lib/postgresql/data
      - ./database/init-docker.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - sanitization-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    labels:
      - "com.docker.compose.service=sanitization-postgres"
      - "version=15.0"
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U sanitization_user -d sanitization_config"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 后端API服务
  sanitization-backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: sanitization-backend
    ports:
      - "3001:3001"
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      # 数据库配置
      - DB_HOST=sanitization-postgres
      - DB_PORT=5432
      - DB_NAME=sanitization_config
      - DB_USER=sanitization_user
      - DB_PASSWORD=sanitization_pass_2024!
      - DB_SSL=false
      # 连接池配置
      - DB_POOL_MAX=10
      - DB_POOL_MIN=2
      - DB_IDLE_TIMEOUT=30000
      - DB_CONNECTION_TIMEOUT=5000
    depends_on:
      sanitization-postgres:
        condition: service_healthy
    networks:
      - sanitization-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.3"
        reservations:
          memory: 128M
          cpus: "0.1"
    labels:
      - "com.docker.compose.service=sanitization-backend"
      - "version=1.0.0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端管理界面
  sanitization-frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sanitization-frontend
    ports:
      - "3000:8080"
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_VERSION=1.0.0
      - REACT_APP_API_URL=http://localhost:3001
    depends_on:
      sanitization-backend:
        condition: service_healthy
    networks:
      - sanitization-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    labels:
      - "com.docker.compose.service=sanitization-frontend"
      - "version=1.0.0"

  # 可选：反向代理服务
  nginx-proxy:
    image: nginx:alpine
    container_name: sanitization-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      sanitization-frontend:
        condition: service_started
      sanitization-backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sanitization-network
    profiles:
      - proxy
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80

networks:
  sanitization-network:
    driver: bridge

volumes:
  sanitization-logs:
    driver: local
    name: sanitization-logs
  sanitization-postgres-data:
    driver: local
    name: sanitization-postgres-data
